// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "EchoServer.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <server/TThreadedServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include "AsyncThriftServer.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::async;

using boost::shared_ptr;
using namespace com::langtaojin::adgaga;

class EchoServerHandler : virtual public EchoServerNull {
public:
  EchoServerHandler() {
    // Your initialization goes here
  }

  void echo(Response& _return, const Request& request) {
    // Your implementation goes here
    _return.__isset.message = true;
    _return.message = request.message;
    printf("%s\n", request.message.c_str());
  }
};

int main(int argc, char **argv) {
  int port = 12500;
  shared_ptr<EchoServerHandler> handler(new EchoServerHandler());
  shared_ptr<TProcessor> processor(new EchoServerProcessor(handler));
  //  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  //  shared_ptr<TTransportFactory> transportFactory(new TFramedTransportFactory());
  //  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
  //
  //  TThreadedServer
  //  server(processor,
  //      serverTransport,
  //      transportFactory,
  //      protocolFactory);
  //
  //  server.serve();
  //

  try
  {
    boost::asio::io_service io_service;
    boost::shared_ptr<boost::asio::ip::tcp::acceptor> acceptor(new boost::asio::ip::tcp::acceptor(io_service));

    boost::asio::ip::tcp::endpoint endpoint(
      boost::asio::ip::address::from_string("127.0.0.1"), port);
    acceptor->open(endpoint.protocol());
    acceptor->bind(endpoint);
    acceptor->listen();

    AsyncThriftServer server(processor, acceptor, 16, 0);
    server.serve();
  }
  catch (std::exception& e)
  {
    printf("caught: %s\n", e.what());
  }
  catch (...)
  {
    printf("caught: something\n");
  }

  return 0;
}

