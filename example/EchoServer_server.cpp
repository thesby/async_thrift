// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "EchoServer.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <server/TThreadedServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace com::langtaojin::adgaga;

class EchoServerHandler : virtual public EchoServerNull {
 public:
  EchoServerHandler() {
    // Your initialization goes here
  }

  void echo(Response& _return, const Request& request) {
    // Your implementation goes here
    _return.__isset.message = true;
    _return.message = request.message;
    printf("%s\n", request.message.c_str());
  }

};

int main(int argc, char **argv) {
  int port = 12500;
  shared_ptr<EchoServerHandler> handler(new EchoServerHandler());
  shared_ptr<TProcessor> processor(new EchoServerProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TFramedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TThreadedServer
  server(processor,
      serverTransport,
      transportFactory,
      protocolFactory);

  server.serve();
  return 0;
}

